それでは、「SwiftのString(文字列) APIとの付き合い方」の発表を始めます。
https://swift-tweets.github.io の発表概要に記載した通り、そこに挙げている3つの記事は理解済みの前提とします(そうでなくとも分かる話も多いと思いますが)。

---

まずSwiftの文字列処理をコード例を交えながら見ていきます。SwiftのStringはCharacter・Unicode Scalar・UTF-16・UTF-8という4つのView(表現)を持っています。

---

通常の文字列処理では書記素クラスタ表現であるCharacter Viewを主に扱うことになるはずです。
書記素クラスタとは、抽象文字すなわち目で見た一文字単位の集合です。

---

CharacterViewはStringから`.characters`でアクセスできて、各種使用例はこれらのリファレンスに書かれています:

- https://developer.apple.com/reference/swift/string
- https://developer.apple.com/reference/swift/string.characterview

---

リファレンスのOverviewにある通り一般的な文字列操作が一々面倒です。カウントするだけでもcharactersを介す必要があり、さらにIntによるsubscriptも不可でIndex型による操作を強いられます。

```swift:characters.swift
let str = "12345"

// カウント
str.characters.count
// → 5

// 部分文字列の取得
let index: String.CharacterView.Index = str.characters.index(of: "3")!
let chars: String.CharacterView = str.characters.prefix(upTo: index)
// Stringにキャスト必要
String(chars)
// → "12"
```

---

こういった扱いのしにくさは、SwiftのString APIが厳密となっているトレードオフであるものの、とはいえ普段の文字列処理の際に一々煩雑な記述を強いられるのは抵抗も感じます。

---

この扱いにくさへどう対処するのが良いか、いくつかの観点で考察していきます。
まずCharacter Viewなど4つのViewに分かれているのは、「文字列」といっても色々な表現があることに依ります。

---

それが予めきちんと分類されているのは良いですが、最も扱う頻度の多いCharacter Viewをデフォルトで直接扱いたくなってきます。
String APIを触っていると実は標準で中途半端にそうなっていることが見受けられます。

---

例えば、StringからもIndexを取得できますが、それはCharacterViewのIndexのtypealiasとして定義されているため、実はcharactersを介して取得したものまったく同じです。

```swift:index.swift
// StringのIndexは次のように定義されている
public struct String {
  public typealias Index = String.CharacterView.Index
}

// 以下はすべてtrue
str.startIndex == str.characters.startIndex
str.endIndex == str.characters.endIndex
String.Index.self == String.CharacterView.Index.self

// 以下などはfalse
String.Index.self == String.UnicodeScalarView.Index.self
```

---

取得できるIndexが同一ということは、すなわちStringはデフォルトでCharacter View扱いとなっているとみなせるのではないでしょうか。

---

カウントも、Index距離を利用することで、charactersを介さずCharacter Viewのcountと同じものを取得することが可能です。

```swift:count.swift
extension String {
    var countOriginal: Int {
        // この戻り値の型はIndexDistanceだが、それはIntのtypealiasなのでそのまま返せる
        return distance(from: startIndex, to: endIndex)
    }
    // 次のように書けば良いが、上のは`characters`使わない縛り
    var count: Int {
        return characters.count
    }
}
```

---

以上のようにStringから直接取得したIndexはCharacter ViewのIndex操作に使えるので、Indexはcharactersを介さずに済み少しシンプルな記述とできます。

```swift:count2.swift
let str = "1️⃣2️⃣3️⃣4️⃣5️⃣"
str.unicodeScalars.count
str.characters.count

let start = str.index(after: str.startIndex)
let end = str.index(start, offsetBy: 2)
// 以下のようにしても同様に動くが、`.characters`は省略可能
//let start = str.characters.index(after: str.startIndex)
//let end = str.characters.index(start, offsetBy: 2)

// subscript操作もcharacters介してもどちらでも同じ
String(str[start...end])
String(str.characters[start...end])
// → "2️⃣3️⃣4️⃣"

// 一方、例えば、以下のようにunicodeScalarsから取得したIndexでcharactersのsubscriptをすると型違いでエラーになる
do {
//    let start = str.unicodeScalars.index(after: str.unicodeScalars.startIndex)
//    let end = str.unicodeScalars.index(start, offsetBy: 2)
//    String(str.characters[start..<end])
//     → error: cannot subscript a value of type 'String.CharacterView' with an index of type 'Range<String.UnicodeScalarView.Index>' String(str.characters[start..<end])
}
```

---

また、Stringには `substring` メソッドもあるので、次のように書くこともできます(パフォーマンスは少し劣る)。いずれの方法にせよ、characters介さなくて済むところは省略すると多少楽になります。

```swift:substring.swift
str.substring(from: start).substring(to: end)
// → "2️⃣3️⃣4️⃣"
// 以下でも同じ
String(str[start...end])
String(str.characters[start...end])
String(str.characters.suffix(from: start).prefix(upTo: end))
String(str.characters.suffix(from: start).prefix(3))
```

---

以上のように、APIの作り的にも挙動的にもStringはデフォルトでCharacter View扱いとみなせ、かつそれを利用して多少楽になると思っていますが、まだ多少違和感が残っています。
一番不思議なのは、Stringに対して直接`count`できないことです。

---

これは、StringがBidirectionalCollection・RangeReplaceableCollectionに準拠するようにすれば、ほぼcharactersと同じメソッドを直接呼べるようになります。

```swift:extension.swift
// プロトコル実装の宣言だけでOK
extension String: BidirectionalCollection, RangeReplaceableCollection {}

"hoge".count

// ↑定義に行くと次にたどり着く
//extension Collection {
//    public var count: Self.IndexDistance { get }
//}
```

---

これを施すとcountだけでなく、コレクション操作や、`prefix`・`suffix`などInt指定で部分文字列取得できるようになったりと色々便利になります。

```swift:extension2.swift
for c in str {
    print(c)
}

str.prefix(3)
// → "123"というString型を直接得られる！
str.characters.prefix(3)
// → このままだとCharacterViewなので、Stringにするにはキャストが必要
String(str.characters.prefix(3))
```

---

ただ、これは罠もありそうなので、注意して取り扱った方が良さそうです。詳しくは https://medium.com/swift-column/swift-string-16245b2723b4#.achuihxel に書きましたが、`var`で定義した文字列に`removeFirst(_:)`を使うとクラッシュして対処が必要でした。

---

なので、この方法を用いるかどうかの判断はお任せします。僕は、文字列内容によってクラッシュすることは無さそう・開発段階で罠も充分検知できるだろう、と感じているので実際に活用しています。

---

一旦まとめると、Stringは元々Character Viewをデフォルトとみなしているようなのでcharactersプロパティを省略することで多少簡潔に書けること、さらにStringをコレクション系のプロトコルに準拠させるとより強力になることを紹介しました。

---

次に、Indexの取り扱いについてです。今までのコード例を見れば分かる通り、Intで直接subscript操作出来ずに、startIndex・endIndexからのoffsetで辿っていく作りになっているのが面倒です。

---

もちろんこれも理由があって、僕は主な理由は高コストな操作であることを意識させるようなAPIとなっているからだと思っています。

---

StringおよびそのViewはRandomAccessCollectionではなくBidirectionalCollectionということもポイントです:
- https://developer.apple.com/reference/swift/randomaccesscollection
- https://developer.apple.com/reference/swift/bidirectionalcollection

---

特にCharacter Viewにおいて抽象文字すなわち目で見た何文字かという概念で文字列を走査・カウントするのは、それらの文字部分に至るまで先頭あるいは終端からすべて走査していく必要があります。

---

この性質が顕著に表れているのが`count`プロパティで、その計算量はO(n)です。
APIデザインガイドラインには、プロパティは `O(1)` であるべきで、そうでない場合はドキュメントに書くように、記載されていてちょうどその例外にあたります。

---

`count`に限らず、同様に多くの文字列アクセスはその性質上 `O(n)` となっています。

---

Swiftでは所望のIndex取得のAPIを始端・末端からのO(n)の走査であることを意識させて、Indexを用いたsubscriptなどの部分文字列取得処理はO(1)という設計になっています。

---

文字列終端付近のIndexを始端から辿るとほぼ文字列全スキャンとなりますが、終端からアクセスするとO(1)に近い効率の良い処理となります。

```swift:performance.swift
// 多くの言語では以下のようにもsubscriptアクセスできるが、これでO(n)の処理が2つ走る。SwiftのString APIでは不可能
// str[str.length - 1]

// 末端からの走査なのでO(1)で済む
str[str.index(before: str.endIndex)..<str.endIndex]
str.substring(from: str.index(before: str.endIndex))

// Swiftでも始端から辿るとO(n)の処理が2つ走るので注意
str[str.index(str.startIndex, offsetBy: str.characters.count - 1)..<str.endIndex]
str.substring(from: str.index(str.startIndex, offsetBy: str.characters.count - 1))
```

---

しかし他のIntでsubscriptアクセスできる言語では文字列アクセスは非効率というわけではないです。例えばRubyだと次の書き方はともに文字列の最後を取得する処理ですが、後者のように高効率に書くことができます。

```ruby:performance.ruby
# 文字列フルスキャン走るので長い文字列だと処理時間かかる
s[s.length - 1]
# 末端から1発でアクセスできるので、長い文字列でも一瞬で処理が終わる
s[-1]
```

---

このように、Indexで文字列範囲を指定するのは、パフォーマンス担保のための必然ではなく、単に高コストな操作であることを意識しやすいようになっているだけということだと思っています。

---

また、SwiftのStringはCharacter Viewベースになっていることを意識しながら扱えば、IndexではなくIntで直接部分文字列の範囲指定しても破綻しないです。

```swift:string.swift
var str = "12345"

// 標準 String APIに乗っ取った書き方
let start = str.index(after: str.startIndex)
let end = str.index(start, offsetBy: 2)
str[start..<end]
// → "23"

// 次の書き方はできないが上の処理は「startIndex + 1 〜 startIndex + 3」と同じ意味なので次のように書けても良いように思える
str[1..<3]
str.characters[1..<3]
// → 現在コンパイルエラーになる

// 同様に他のViewでも、それぞれのViewの数え方でカウントしたものということを理解した上でなら、次のようにIntでsubscriptアクセスしても問題無いように思える
str.unicodeScalars[1..<3]
// → 現在コンパイルエラーになる
```

---

とはいえ、せっかくSwiftがパフォーマンスに気を使ったAPI設計にしているのに、`str[1..<3]` のようにアクセスできる`subscript`などを追加してしまうのはちょっと躊躇します。

---

前述の通りパフォーマンスを意識させることが本質ということは、それを明示すれば良いということで、次のようにラベル付き(sequentialAccessとしました)のsubscriptを定義すれば良いのではと思いました。

```swift:performance.swift
extension String.CharacterView {
// 範囲外チェックは未対応
    public subscript(sequentialAccess range: Range<Int>) -> String.CharacterView {
        let lower = range.lowerBound
        let startIndex = index(self.startIndex, offsetBy: lower)
        let endIndex = index(startIndex, offsetBy: range.count)
        return self[startIndex..<endIndex]
    }

    public subscript(sequentialAccess index: Int) -> Character {
        return self[sequentialAccess: index..<index + 1].first!
    }
}

extension String {
    public subscript(sequentialAccess range: Range<Int>) -> String {
        return String(characters[sequentialAccess: range])
    }

    public subscript(sequentialAccess index: Int) -> String {
        return self[sequentialAccess: index..<index + 1]
    }
}

var str = "12345"
str[sequentialAccess: 1..<3]
// → "23"
String(str.characters[sequentialAccess: 1..<3])
// → "23"
```

---

ラベルで通常の挙動とは違うことを明示するのは https://github.com/apple/swift-evolution/blob/master/proposals/0080-failable-numeric-initializers.md のイニシャライザーでも提案されていますし、分かりやすいかなと思っています。

---

文字列の始端からベタに走査する処理にのみ対応していて、`str[sequentialAccess: -1]` などで終端から効率よく辿れるようになどもサポートする余地もありますが、パフォーマンス気になる処理は標準APIをベタに使えば良いかなという思いがあります。

---

一応 https://github.com/mono0926/SwiftyStringExtension で公開していますが、まだこっそり自分のプロジェクトに使っているだけで公にはリリースしていないです。
利用する場合、罠が潜んでいる可能性もあるので、ご注意ください。

---

SwifterSwift では、ラベル無しのsubscriptメソッドを追加していますが、標準APIのごとくカジュアルにパフォーマンス問題になりそうな記述ができてしまうので、ちょっと危険かなと思いました(便利ですが)。
https://github.com/omaralbeik/SwifterSwift/blob/master/Source/Extensions/StringExtensions.swift#L279-L310

---

また、IntでStringの要素にアクセスして良いかという懸念はパフォーマンス以外にもNSStringとの相互運用にもありそうです。

---

次の場合StringにRange<Int>でアクセスできてしまうと「元のNSStringの部分文字列」と「NSRangeをtoRangeという標準メソッドで変換してStringから取得した部分文字列」が食い違います。

```swift:nsstring2.swift
let str = "1️⃣2️⃣3️⃣4️⃣5️⃣"

let nsRange = NSRange(location: 0, length: 3)
// → "1️⃣"

(str as NSString).substring(with: nsRange)
str[sequentialAccess: nsRange.toRange()!]
// → "1️⃣2️⃣3️⃣"
```

---

UITextViewなど扱っていると、APIから返ってくるレンジがNSRangeだったりするので、それを安易にStringに適用してしまうと取得できる文字列を間違えたりクラッシュしてしまうことなどにつながります。

---

標準のsubstringメソッドは、Range<String.index>を受けるようになっていてRange<Int>は受け付けないため、先ほどのミスはコンパイルエラーで防げます。Stringを「便利」にした際はこのあたりにも気を付ける必要が出てきます。

---

ちなみにどうするのが良いかというと、2つの方法が考えられます。
1つめは、StringをNSStringにキャストしてからNSRangeで部分文字列取得するやり方です。

---

2つめは、NSRangeはUTF16のIndex範囲であるので、それを元に適切なRange<Int>に変換して、Stringから部分文字列取得するやり方 ( https://medium.com/swift-column/swift-string-16245b2723b4#.achuihxel に記載 )です。

---

NSプレフィックス系の型を極力扱いたくなかったので、僕は後者を選択していますが1つめのやり方の方が素直な気もしています🤔

---

以上で、現状のSwiftのString APIの扱いのしにくさの本質はどこにあるのかの説明と、それに対する自分のアプローチを紹介しました。

---

別解としては、 @koher さんがこっそり公開している https://github.com/koher/easy-text のアプローチも良いなと思いました。
初期化時にStringのCharacter Viewを、Arrayとして保持してしまう、という富豪的な実装になっています。

---

イニシャライザーで文字列全スキャンするためO(n)となっていて( https://github.com/koher/easy-text/blob/master/Sources/Text.swift#L4-L6 )イレギュラーなので実際ライブラリとして公開する場合、その旨をコメントに書いてあると良いかなと思いました。

---

また、他の言語でもおそらく文字列の初期化時にその全スキャンがかかるようになっているのは珍しいはずなので取り扱いには注意ですが、普段多く扱うような大した長さでは無い文字列処理はすごくやりやすくなりそうで良いと思いました。

---

あるいは、`NSString`にキャストするとIntで範囲指定できるようになりますが、抽象文字がUTF16一文字で表現できる時しか使えなかったり微妙です(そもそもNSプレフィックスの型は極力使わない方が良いですね)

```swift:nsstring.swift
var str = "12345"

// NSStringはUTF16なので、次が満たすような時のみNSStringにキャストして対処もできそう
str.characters.count == str.utf16.count

// 2回キャスト必要になって面倒
((str as NSString).substring(from: 1) as NSString).substring(to: 2)
// → "23"

// NSRange使う方法
(str as NSString).substring(with: NSRange(location: 1, length: 2))
// → "23"
```

---

さきほどのNSStringのコード例見ると分かる通り、そういえばObjective-C時代から文字列処理はやりにくくて、それに開発者が慣れてしまっている感もあるかなと思いました(　´･‿･｀)
今後Swiftの標準APIが改善されていくのを期待しています。

---

https://github.com/apple/swift-evolution/blob/master/README.md の「String re-evaluation」という項目にも注目です。

---

Swift 4で文字列周りに変更ありそうな記述ですが、あまり動きが無いので間に合わず5以降になるかもと思っています。

> Swift 4 seeks to make strings more powerful and easier-to-use...

---

以上、改めてSwiftの文字列処理に向き合ってみましたが、現状初学者が触れる際の最も大きな関門の一つになる程度には扱いにくいと思いました。Swift 3までの変更の多さもあいまって、適当にぐぐって所望の文字列処理をするまでかなり苦労しそうです。

---

少し枠が余ったので、最後にSwiftに限らずですが悩ましい文字列のカウント問題について触れていきます。

---

Swiftは後発なだけあって、良く出来ています。Viewで表現が分かれているのは前述の通りですが、次の"🇯🇵"のように複数のコードポイント(unicode scalar)を組み合わせたものにも概ね対応しています。

```swift:emoji1.swift
do {
    let str = "👍"
    str.characters.count // 1
    str.unicodeScalars.count// 1
    str.utf8.count // 4
    str.utf16.count // 2

    str.unicodeScalars.map { String($0.value, radix: 16) }
    // → "1f44d"
}

do {
    let str = "🇯🇵"
    str.characters.count // 1
    str.unicodeScalars.count // 2
    str.utf8.count // 8
    str.utf16.count // 4

    str.unicodeScalars.map { String($0.value, radix: 16) }
    // → "1f1ef", "1f1f5"
}
```

---

ただ、未対応のものもあって、👍🏼(肌トーン付き)や👩‍👩‍👧‍👦(複数絵文字の連結)は、characters.countでは複数扱いになってしまいます。

```swift:emoji2.swift
do {
    let str = "👍🏼"
    str.characters.count // 2
    str.unicodeScalars.count // 2
    str.utf8.count // 8
    str.utf16.count // 4

    str.unicodeScalars.map { String($0.value, radix: 16) }
    // → "1f44d", "1f3fc"
}
do {
    let str = "👩‍👩‍👧‍👦"
    str.characters.count // 4
    str.unicodeScalars.count // 7
    str.utf8.count // 25
    str.utf16.count // 11

    str.unicodeScalars.map { String($0.value, radix: 16) }
    // → "1f469", 200d", "1f469", "200d", "1f467, "200d", "1f466"
}
```

---

このあたりは自前でやるしかないかというとそうではなく、 `enumerateSubstrings(in:options:_:)` にて列挙すると、ともに正しく1文字扱いされます。

https://developer.apple.com/reference/swift/string/1643111-enumeratesubstrings

---

ただ、このメソッドで厳密に数えるのが常に正解かというと、マルチプラットフォームの場合は必ずしもそうではなく各プラットフォーム・データベースの扱いやすさなど踏まえて、良い感じに妥協仕様にするのが現実的かなと思っています。

---

ちなみに僕のTwitter名は、現在"🐶Monor Swift🐶🍎💻📱⌚️"にしていますが、Webでは入力出来たもののiOS版ではすでに文字数オーバーで編集できなくて不便で困っています。iOS版ではNSStringでカウント(UTF16でのカウント)してそうです👀

---

新しめの絵文字などのカウントに追従できていないのは仕方ないですが、せめてプラットフォームで揃える努力はして欲しいなと思いました。

---

最後ちょっと余談になりましたが、発表は以上です。
ご静聴ありがとうございました(　´･‿･｀)